[{"F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\index.js":"1","F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\App.js":"2","F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\components\\VideoTranscript.js":"3"},{"size":215,"mtime":1607438533612,"results":"4","hashOfConfig":"5"},{"size":228,"mtime":1607537133121,"results":"6","hashOfConfig":"5"},{"size":6239,"mtime":1608276099914,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"xp88u8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\index.js",[],["16","17"],"F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\App.js",[],"F:\\MyProjects\\VirtusaProject\\youtube_transcript\\src\\components\\VideoTranscript.js",["18"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FormControl, InputGroup, Button, Card, Image } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport getYoutubeId from \"get-youtube-id\";\r\n\r\nconst VideoTranscript = () => {\r\n  const [link, setLink] = useState(\"\");\r\n  const [player, setPlayer] = useState();\r\n  const [transcript, setTranscript] = useState([]);\r\n  const [transcriptResult, setTranscriptResult] = useState();\r\n  const [subtitleStart, setSubtitleStart] = useState(0);\r\n  const scrollContainer = useRef(null);\r\n\r\n  // Function definitions\r\n\r\n  const scrollToBottom = () => {\r\n    scrollContainer.current.scroll({\r\n      top: scrollContainer.current.scrollHeight,\r\n      behaviour: \"smooth\",\r\n    });\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setLink(e.target.value);\r\n  };\r\n\r\n  const timeFormat = (res) => {\r\n    var dur = parseInt(res.data.start);\r\n    var min = ~~((dur % 3600) / 60);\r\n    var sec = ~~(dur % 60);\r\n    var hr = ~~(dur / 3600);\r\n    var ret = \"\";\r\n    if (hr > 0) {\r\n      ret += \"\" + hr + \":\" + (min < 10 ? \"0\" : \"\");\r\n    }\r\n\r\n    ret += \"\" + min + \":\" + (sec < 10 ? \"0\" : \"\");\r\n    ret += \"\" + sec;\r\n    console.log(ret);\r\n    return ret;\r\n  };\r\n\r\n  const bookmark = () => {\r\n    const time = parseInt(player.getCurrentTime());\r\n    if (time > 0) {\r\n      if (subtitleStart < time) {\r\n        axios\r\n          .get(`http://localhost:5000/api/cclist/${time}`)\r\n          .then((res) => {\r\n            if (res.status === 200) {\r\n              const timeframe = timeFormat(res);\r\n              const data = {\r\n                start: timeframe,\r\n                text: res.data.text,\r\n              };\r\n\r\n              const dataArray = [...transcript];\r\n              dataArray.push(data);\r\n              setTranscript(dataArray);\r\n              setSubtitleStart(res.data.start + res.data.duration);\r\n            } else {\r\n              console.error(res.data);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  const handleSubmit = () => {\r\n    if (player) {\r\n      const frame = document.querySelector(\"#player\");\r\n      const frameParent = frame.parentElement;\r\n      frame.remove();\r\n      const div = document.createElement(\"div\");\r\n      div.setAttribute(\"id\", \"player\");\r\n      div.setAttribute(\"style\", \"box-shadow:5px 5px 15px rgba(0,0,0,0.2)\");\r\n      frameParent.insertBefore(div, frameParent.childNodes[0]);\r\n      setPlayer(null);\r\n    }\r\n    if (link) {\r\n      const videoId = getYoutubeId(link);\r\n      axios\r\n        .get(`http://localhost:5000/api/transcript/${videoId}`)\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            res.data.status === 200\r\n              ? setTranscriptResult(res.data)\r\n              : setTranscriptResult(res.data);\r\n          } else {\r\n            console.error(res.data);\r\n          }\r\n        });\r\n\r\n      const playerObj = new window.YT.Player(\"player\", {\r\n        height: 300,\r\n        width: \"100%\",\r\n        videoId: videoId,\r\n        playerVars: { rel: 0 },\r\n      });\r\n      if (playerObj) {\r\n        setPlayer(playerObj);\r\n      }\r\n    }\r\n  };\r\n\r\n  // useEffect section\r\n  useEffect(() => {\r\n    if (!window.YT) {\r\n      var tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/player_api\";\r\n      var firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(scrollToBottom, [transcript]);\r\n\r\n  // JSX Section\r\n  return (\r\n    <div className=\"container p-5\" style={{ height: \"100vh\" }}>\r\n      <div className=\"row\">\r\n        <InputGroup>\r\n          <FormControl\r\n            onChange={handleInput}\r\n            placeholder=\"Enter video link..\"\r\n          />\r\n          <Button onClick={handleSubmit} className=\"btn-success\">\r\n            Get video\r\n          </Button>\r\n        </InputGroup>\r\n        <div className=\"col-sm-12 col-md-12 col-lg-6\">\r\n          <div className=\"mt-5\">\r\n            <div\r\n              id=\"player\"\r\n              style={{ boxShadow: \"5px 5px 15px rgba(0,0,0,0.2)\" }}\r\n            ></div>\r\n            {player ? (\r\n              <>\r\n                <Button\r\n                  className=\"btn-primary btn-block mt-3\"\r\n                  onClick={bookmark}\r\n                >\r\n                  Bookmark\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <Image\r\n                style={{\r\n                  width: \"100%\",\r\n                  maxHeight: \"300px\",\r\n                  boxShadow: \"5px 5px 15px rgba(0,0,0,0.2)\",\r\n                }}\r\n                src=\"https://cdn.dribbble.com/users/141880/screenshots/2431840/dailyui-057.gif\"\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"transcript-container col-sm-12 col-md-12 col-lg-6\"\r\n          ref={scrollContainer}\r\n        >\r\n          {transcriptResult ? (\r\n            <div\r\n              className={\r\n                transcriptResult.status === 200\r\n                  ? \"alert alert-success alert-dismissible fade show\"\r\n                  : \"alert alert-danger alert-dismissible fade show\"\r\n              }\r\n              role=\"alert\"\r\n            >\r\n              {transcriptResult.text}\r\n            </div>\r\n          ) : null}\r\n          {transcript.length !== 0 ? (\r\n            transcript.map((res, i) => {\r\n              return (\r\n                <div key={i}>\r\n                  <Card\r\n                    className=\"m-3\"\r\n                    style={{\r\n                      boxShadow: \"0px 0px 15px rgba(0,0,0,0.2)\",\r\n                      height: \"auto\",\r\n                    }}\r\n                  >\r\n                    <Card.Header>\r\n                      Transcript {transcript ? \"at\" + \" \" + res.start : null}\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                      <p>{res.text}</p>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <h4>Transcript will appear here</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoTranscript;\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":188,"column":53,"nodeType":"25","messageId":"26","endLine":188,"endColumn":54},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]